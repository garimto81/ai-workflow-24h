name: Text Mission Automation

on:
  workflow_dispatch:
    inputs:
      mission_text:
        description: '미션을 텍스트로 입력 (예: 1~3화 반복 개선)'
        required: true
        default: '1~3화 반복 개선'
      
  issues:
    types: [opened, edited]
  
  issue_comment:
    types: [created]

jobs:
  parse-and-execute:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch') ||
      (github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'mission')) ||
      (github.event_name == 'issue_comment' && startsWith(github.event.comment.body, '/mission'))
    
    timeout-minutes: 350
    
    steps:
    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/workflow/requirements.txt
    
    - name: Extract mission text
      id: extract-mission
      run: |
        # 미션 텍스트 추출
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          MISSION_TEXT="${{ github.event.inputs.mission_text }}"
        elif [ "${{ github.event_name }}" = "issues" ]; then
          # Issue 본문에서 미션 추출
          MISSION_TEXT=$(echo "${{ github.event.issue.body }}" | head -n 1)
        elif [ "${{ github.event_name }}" = "issue_comment" ]; then
          # 코멘트에서 /mission 이후 텍스트 추출
          MISSION_TEXT=$(echo "${{ github.event.comment.body }}" | sed 's/^\/mission //')
        fi
        
        echo "mission_text=$MISSION_TEXT" >> $GITHUB_OUTPUT
        echo "📝 미션: $MISSION_TEXT"
    
    - name: Parse mission
      id: parse-mission
      run: |
        cat > parse_mission.py << 'EOF'
        import sys
        import json
        sys.path.append('src/workflow')
        
        from text_mission_parser import MissionExecutor
        
        mission_text = """${{ steps.extract-mission.outputs.mission_text }}"""
        
        executor = MissionExecutor()
        config = executor.execute_text_mission(mission_text)
        
        # GitHub Actions 출력 설정
        with open('mission_config.json', 'w') as f:
            json.dump(config, f, indent=2, ensure_ascii=False)
        
        # 출력 변수 설정
        episodes = ','.join(map(str, config['target_episodes']))
        max_cycles = config.get('max_cycles', 10)
        
        print(f"::set-output name=episodes::{episodes}")
        print(f"::set-output name=max_cycles::{max_cycles}")
        print(f"::set-output name=action::{config.get('action', 'improve')}")
        
        # 상세 정보 출력
        print("\n📋 파싱된 미션 설정:")
        print(json.dumps(config, indent=2, ensure_ascii=False))
        EOF
        
        python parse_mission.py
    
    - name: Execute mission
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        cat > execute_text_mission.py << 'EOF'
        import sys
        import json
        import asyncio
        sys.path.append('src/workflow')
        
        from new_agent_system import NewAgentSystem
        from text_mission_parser import TextMissionParser
        
        async def run_text_mission():
            # 미션 설정 로드
            with open('mission_config.json', 'r') as f:
                config = json.load(f)
            
            print(f"🎯 텍스트 미션 실행")
            print(f"   원문: {config['description']}")
            print(f"   대상: {config['target_episodes']}화")
            print(f"   액션: {config['action']}")
            print(f"   최대 사이클: {config['max_cycles']}")
            
            # 시스템 초기화
            system = NewAgentSystem()
            await system.initialize()
            
            # 미션 실행
            results = {}
            for cycle in range(1, config['max_cycles'] + 1):
                print(f"\n🔄 사이클 #{cycle}/{config['max_cycles']}")
                
                cycle_results = {}
                for episode in config['target_episodes']:
                    task = {
                        'type': 'improve_episode',
                        'episode_number': episode,
                        'target_score': config.get('success_criteria', {}).get('min_score', 8.0),
                        'priority_aspects': config.get('priority_aspects', [])
                    }
                    
                    result = await system.main_coordinator.coordinate_episode_improvement(task)
                    cycle_results[f'episode_{episode}'] = result
                
                # 성공 체크
                success = True
                if 'success_criteria' in config:
                    for criterion, value in config['success_criteria'].items():
                        if 'score' in criterion:
                            # 점수 기준 체크
                            for ep_result in cycle_results.values():
                                if ep_result.get('final_score', 0) < value:
                                    success = False
                
                if success:
                    print(f"✅ 미션 성공!")
                    break
            
            # 최종 결과 저장
            with open('mission_results.json', 'w') as f:
                json.dump({
                    'mission': config['description'],
                    'cycles_used': cycle,
                    'results': cycle_results
                }, f, indent=2, ensure_ascii=False)
            
            return results
        
        asyncio.run(run_text_mission())
        EOF
        
        python execute_text_mission.py
    
    - name: Create report
      run: |
        echo "## 📝 텍스트 미션 실행 결과" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 미션" >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.extract-mission.outputs.mission_text }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 해석" >> $GITHUB_STEP_SUMMARY
        echo "- 에피소드: ${{ steps.parse-mission.outputs.episodes }}" >> $GITHUB_STEP_SUMMARY
        echo "- 액션: ${{ steps.parse-mission.outputs.action }}" >> $GITHUB_STEP_SUMMARY
        echo "- 최대 사이클: ${{ steps.parse-mission.outputs.max_cycles }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f mission_results.json ]; then
          echo "### 결과" >> $GITHUB_STEP_SUMMARY
          python -c "
          import json
          with open('mission_results.json') as f:
              data = json.load(f)
              print(f\"- 사용된 사이클: {data.get('cycles_used', 'N/A')}\")
          " >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Update issue (if triggered by issue)
      if: github.event_name == 'issues' || github.event_name == 'issue_comment'
      uses: actions/github-script@v6
      with:
        script: |
          const issue_number = context.issue.number;
          
          // 결과 읽기
          const fs = require('fs');
          let results = {};
          if (fs.existsSync('mission_results.json')) {
            results = JSON.parse(fs.readFileSync('mission_results.json', 'utf8'));
          }
          
          // 코멘트 작성
          const comment = `
          ## ✅ 미션 실행 완료
          
          **미션**: ${results.mission || 'N/A'}
          **사이클**: ${results.cycles_used || 'N/A'}
          
          [상세 결과 보기](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          `;
          
          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issue_number,
            body: comment
          });
    
    - name: Commit results
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add -A
        git diff --staged --quiet || git commit -m "텍스트 미션: ${{ steps.extract-mission.outputs.mission_text }}"
        git push